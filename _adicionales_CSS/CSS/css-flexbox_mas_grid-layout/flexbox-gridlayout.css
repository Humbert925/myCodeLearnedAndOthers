*{
    box-sizing: border-box;
}
.flex-container{
    display: flex;
    background-color: aqua;
    padding: 10px;
    border: 2px solid black;
}
.flex-container div {
    background-color: gainsboro;
    width: 100px;
    margin: 10px;
    text-align: center;
    line-height: 75px;
    font-size: 30px;
    border: 2px solid black;
}
.grid-container{
    display: grid;
    background-color: blanchedalmond;
    grid-template-columns: repeat(3, auto);
}
.grid-container div{
    background-color: crimson;
    color: white;
    border: thistle 2px solid;
}


/* 
*REPASO DE PROPIEDADES DE FLEX*

flex-wrap (ajusta cont. a pantalla): + flex-direction (señala si va en col. o fila): = flex-flow
justify-content: center, start,end, space-around, space-between
align-items: [center, flex-start/end,stretch, baseline, ]
font-size: 
order: asigna un orden a los difernetes elementos(no me parece útil)
flex-grow (derecho a espacio, prioriza segun el numero mayor)
flex-shrink (reduce el espacio del elemento con el mayor número)
flex-basis(da una medida mínima)
flex abarca las propiedades anteriores en ese  orden (grow shrink basis)
*/

/*
*REPASO DE GRID*
______________________________________________________
grid-template-column + grid-template-row = 
grid-template-areas: ('usa los nombres de los items' ex.
'header header header header'
'menu main main aside' 
'footer footer footer footer');
se deben definir grid-area a cada elemento que participa
ya sea en la linea de código, de forma interna o externa en la hoja de CSS
------------------------------------------------------
grid-column + grid-row = grid-area
justify-content [igual que en flex]
align content [idem]
height/ witdh

asignar class="item1"
.item1{
grid-column: 1/ 3;
grid-row: 1/4;
}
*span abarca el ancho indicado, p.e. span 2(dos columnas)*

*/